{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\n// Enable CORS\napp.use(cors());\napp.use(express.json());\n\n// Connect to MongoDB\nmongoose.connect('mongodb://localhost:27017/designboost', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\n// Define MongoDB schema and models here\n\n// Example user schema\nconst userSchema = new mongoose.Schema({\n  username: String,\n  password: String\n});\nconst User = mongoose.model('User', userSchema);\n\n// Example signup endpoint\napp.post('/signup', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    const user = await User.create({\n      username,\n      password\n    });\n    res.json({\n      user\n    });\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\n\n// Example signin endpoint\napp.post('/signin', async (req, res) => {\n  const {\n    username,\n    password\n  } = req.body;\n  try {\n    const user = await User.findOne({\n      username,\n      password\n    });\n    if (user) {\n      res.json({\n        success: true,\n        user\n      });\n    } else {\n      res.json({\n        success: false,\n        message: 'Invalid credentials'\n      });\n    }\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({\n      error: 'Internal Server Error'\n    });\n  }\n});\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","mongoose","cors","app","PORT","process","env","use","json","connect","useNewUrlParser","useUnifiedTopology","userSchema","Schema","username","String","password","User","model","post","req","res","body","user","create","error","console","status","findOne","success","message","listen","log"],"sources":["C:/Windows/System32/design-boost/src/auth/server.js"],"sourcesContent":["const express = require('express');\r\nconst mongoose = require('mongoose');\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 3001;\r\n\r\n// Enable CORS\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// Connect to MongoDB\r\nmongoose.connect('mongodb://localhost:27017/designboost', {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n});\r\n\r\n// Define MongoDB schema and models here\r\n\r\n// Example user schema\r\nconst userSchema = new mongoose.Schema({\r\n  username: String,\r\n  password: String,\r\n});\r\n\r\nconst User = mongoose.model('User', userSchema);\r\n\r\n// Example signup endpoint\r\napp.post('/signup', async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  try {\r\n    const user = await User.create({ username, password });\r\n    res.json({ user });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: 'Internal Server Error' });\r\n  }\r\n});\r\n\r\n// Example signin endpoint\r\napp.post('/signin', async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  try {\r\n    const user = await User.findOne({ username, password });\r\n    if (user) {\r\n      res.json({ success: true, user });\r\n    } else {\r\n      res.json({ success: false, message: 'Invalid credentials' });\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).json({ error: 'Internal Server Error' });\r\n  }\r\n});\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on port ${PORT}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACF,IAAI,IAAI,IAAI;;AAErC;AACAD,GAAG,CAACI,GAAG,CAACL,IAAI,CAAC,CAAC,CAAC;AACfC,GAAG,CAACI,GAAG,CAACR,OAAO,CAACS,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACAP,QAAQ,CAACQ,OAAO,CAAC,uCAAuC,EAAE;EACxDC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACtB,CAAC,CAAC;;AAEF;;AAEA;AACA,MAAMC,UAAU,GAAG,IAAIX,QAAQ,CAACY,MAAM,CAAC;EACrCC,QAAQ,EAAEC,MAAM;EAChBC,QAAQ,EAAED;AACZ,CAAC,CAAC;AAEF,MAAME,IAAI,GAAGhB,QAAQ,CAACiB,KAAK,CAAC,MAAM,EAAEN,UAAU,CAAC;;AAE/C;AACAT,GAAG,CAACgB,IAAI,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACtC,MAAM;IAAEP,QAAQ;IAAEE;EAAS,CAAC,GAAGI,GAAG,CAACE,IAAI;EAEvC,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMN,IAAI,CAACO,MAAM,CAAC;MAAEV,QAAQ;MAAEE;IAAS,CAAC,CAAC;IACtDK,GAAG,CAACb,IAAI,CAAC;MAAEe;IAAK,CAAC,CAAC;EACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpBJ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACnB,IAAI,CAAC;MAAEiB,KAAK,EAAE;IAAwB,CAAC,CAAC;EAC1D;AACF,CAAC,CAAC;;AAEF;AACAtB,GAAG,CAACgB,IAAI,CAAC,SAAS,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACtC,MAAM;IAAEP,QAAQ;IAAEE;EAAS,CAAC,GAAGI,GAAG,CAACE,IAAI;EAEvC,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMN,IAAI,CAACW,OAAO,CAAC;MAAEd,QAAQ;MAAEE;IAAS,CAAC,CAAC;IACvD,IAAIO,IAAI,EAAE;MACRF,GAAG,CAACb,IAAI,CAAC;QAAEqB,OAAO,EAAE,IAAI;QAAEN;MAAK,CAAC,CAAC;IACnC,CAAC,MAAM;MACLF,GAAG,CAACb,IAAI,CAAC;QAAEqB,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IAC9D;EACF,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACpBJ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACnB,IAAI,CAAC;MAAEiB,KAAK,EAAE;IAAwB,CAAC,CAAC;EAC1D;AACF,CAAC,CAAC;AAEFtB,GAAG,CAAC4B,MAAM,CAAC3B,IAAI,EAAE,MAAM;EACrBsB,OAAO,CAACM,GAAG,CAAE,6BAA4B5B,IAAK,EAAC,CAAC;AAClD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}